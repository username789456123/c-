#include "stdio.h"
#include "string.h"      	//包含字符串比较、拷贝等字符串处理函数
#include "malloc.h"      	//包含动态内存分配、回收函数等内存分配管理函数
#define TRUE 1				//定义符号常量“真”
#define FALSE 0				//定义符号常量“假”
typedef int STATUS;			//定义状态类型，表示“真”或“假” 
#define MAXSIZE 3           //三个元素
#define ZERO 0              //0表示空格
typedef int NODE[MAXSIZE][MAXSIZE];  //图中节点为二维数组

struct NEIGHBORNODE                     //节点类型
{
    NODE node;                          //节点
    struct NEIGHBORNODE *next;          //临近节点
};
typedef struct NEIGHBORNODE *NEIGHBOR;  //相邻节点类型

struct ANODE                            //节点类型
{
    NODE node;                          //节点
    NEIGHBOR adjacents;                 //临近节点
};
typedef struct ANODE ANYNODE;           //节点类型

struct GRAPHNODE                        //图的节点存储类型
{
    ANYNODE node;                       //节点
    struct GRAPHNODE *next;             //其他节点
};
typedef struct GRAPHNODE *GRAPH;        //图类型
typedef struct NEIGHBORNODE *PATH;      //路径类型
 struct Paths			//路径集合
 {
	PATH path;
	struct Paths *next;
 };
typedef struct Paths *PATHS;            //路径集合类型
typedef struct Paths *STACK;

STATUS equal (NODE node1, NODE node2 )
{
    int i, j;                   //二维数组的行下表和列下标
    STATUS flag=TRUE;           //二维数组对应的元素相等，九宫格相同
    for(i=0;i<MAXSIZE;i++)      //行下标变化
    {
        for(j=0;j<MAXSIZE;j++)                  //列下标变化
            if (node1[i][j]!=node2[i][j])        //其中有一个元素不相等
            {
                flag=FALSE;                     //不相等
                break;                          //结束
            }
        if(flag==FALSE) break;                  //九宫格不相同
    }
    return flag;
}
void setvalue(NODE node1, NODE node2)           //节点(矩阵)赋值
{
    int i, j;                                   //二维数组的行下标和列下标
    for(i=0; i<MAXSIZE; i++)
        for(j=0; j<MAXSIZE; j++)
            node1[i][j]=node2[i][j];
}
void priNode(NODE node)                         //显示节点(矩阵)
{
    int i, j;                                   //二维数组的行下标和列下标
    for ( i = 0; i < MAXSIZE; i++)
    {
        for(j=0; j<MAXSIZE; j++)   printf("%5d",node[i][j]);           //按列下标显示
        printf("\n");           //换行显示
    }
    printf("#############################################\n");
}
STATUS Locate(NODE  node, int *hori, int *vert, int zero)
{                               //由节点获取所有子节点
    int i,j;                    //行下标与列下标
    STATUS flag=FALSE;
    for(i=0;i<MAXSIZE;i++)          //行下标
    {
        for(j=0;j<MAXSIZE;j++)      //列下标
            if (node[i][j]==zero)
            {
                *hori=i;            //空格所在的行和列
                *vert=j;
                flag=TRUE;          //找到空格结束
                break;
            }
        if(flag==TRUE) 
            break;       //找到空格，结束
    }
    return flag;                    //是否找到空格
}
void Exchange(NODE node, int hori1, int vert1, int hori2, int vert2)
{                       //位置[hori1, vert1]的元素与位置[hori2, vert2]的元素交换位置
    int tempnode;
    tempnode=node[hori1][vert1];        //交换九宫格数字
    node[hori1][vert1]=node[hori2][vert2];
    node[hori2][vert2]=tempnode;
}

 NEIGHBOR CopyNeighbors(NEIGHBOR children)					//节点集复制
{
	NEIGHBOR copynode, lastnode, head=NULL;				//没有子节点
	while(children)
	{	//分配节点单元
		copynode=(NEIGHBOR)malloc(sizeof(struct NEIGHBORNODE));
		setvalue(copynode->node, children->node);	//复制节点
		copynode->next=NULL;
		if(head==NULL) 			//第1个节点
			head=copynode;
		else					//建立链接，复制子节点 
			lastnode->next=copynode;
		lastnode=copynode;
		children=children->next;	//下一个子节点 
	 } 
	 return head;				//返回头节点 
 } 

NEIGHBOR AddAnAdjacents(NEIGHBOR br, NODE node)   //在br兄弟节点群中增加一个兄弟节点node
{
	NEIGHBOR b, pb;		//兄弟节点变量
	b=(NEIGHBOR)malloc(sizeof(struct NEIGHBORNODE)); //动态开辟一个兄弟单元
	setvalue(b->node, node);
	b->next=NULL;
	if(br==NULL) 	//没有兄弟节点的情况
		br=b;		//node就是第一个兄弟 
	else			//有兄弟节点的情况 
	{				//node就是最后一个兄弟节点 
		pb=br;
		while(pb->next)pb=pb->next;
		pb->next=b;
	 } 
	return br;		//返回兄弟节点 
 }
  PATH CopyPath(PATH path)		//复制路径
 {
	 PATH tempath;
	 tempath=(PATH)CopyNeighbors((NEIGHBOR)path);			//路径与兄弟节点集合相同
	 return tempath;
 }
 struct Paths *CopyPaths(struct Paths *paths)		//复制路径集合
 {
	 struct Paths *copynode, *lastnode, *head=NULL;
	 while (paths)				//路径集合不为空
	 {
		 copynode=(struct Paths*) malloc(sizeof(struct Paths));		//路径节点
		 copynode->path=CopyPath(paths->path);			//复制第一条路径
		 copynode->next=NULL;							//复制路径
		 if (head==NULL)
			 head=copynode;
		 else			//其他路径
		 	 lastnode->next=copynode;
		 lastnode=copynode;					//加入路径集合
		 paths=paths->next;
	 }
	 return head;
 }
 PATH AddANodeToPath(NODE node, PATH path)	//节点加入路径中
 {
	 PATH p;
	 p=(NEIGHBOR)malloc(sizeof(struct NEIGHBORNODE));		//开辟节点空间
	 setvalue(p->node, node);
	 if (path==NULL)			//路径上的第一个节点
		 p->next=NULL;
	 else
	 	 p->next=path;			//加入到路径头部
	 path=p;					//路径倒叙加入
	 return path;				//返回路径头部 
	 
 }
  struct Paths* AddAPathToPaths(PATH path, struct Paths* paths)
{											//路径加入路径集合
	PATH copypath;
	struct Paths *ps=NULL, *p;
	if(path==NULL) return paths;			//没有路径
	copypath=CopyPath(path);				//复制路径
	ps=(struct Paths *)malloc(sizeof(struct Paths));		//开辟路径集合节点
	ps->path=copypath;				//复制的路径置入
	ps->next=NULL;		
	if(paths==NULL)					//路径集合为空
		paths=ps;
	else
	{
		p=paths;
		while(p->next) p=p->next;
		p->next=ps;
	}
	return paths;
}
STATUS IsInPath(NODE node, PATH path)           //节点在路径中
{
    PATH p=path;
    STATUS flag=FALSE;                          //节点是否在路径中的标识
    while (p)
    {
        if(equal(node, p->node)==TRUE)            //node在路径中
        {
            flag=TRUE;
            break;
        }
        else
            p=p->next;
    }
    return flag;                                //返回真、假值
}
 NEIGHBOR DeleteNodeInPath(NEIGHBOR adjacents, PATH path)
{           //从节点集合adjacents中删除节点在路径path中的节点
    NEIGHBOR n1=adjacents, n2;
    STATUS flag=FALSE;
    while (n1)                                          //节点集合的每个节点
    {
        flag=IsInPath(n1->node,path);                   //节点是否在路径中
        if(flag==TRUE)
        {
                if(n1==adjacents)                       //删除节点
                {
                    adjacents=n1->next;                 //下一个节点
                    free(n1);                           //删除当前节点
                    n1=adjacents;                       //其他节点
                }
                else                                    //删除节点
                {
                    n2->next=n1->next;                  //NULL
                    free(n1);                           //删除当前节点
                    n1=n2->next;                        //NULL
                }
        }
        else
        {
            n2=n1;                                      //下一个节点
            n1=n1->next;
        }
    }
    return adjacents;
}

struct Paths* FormPathsFromNodes(NEIGHBOR adjacents, PATH path, PATHS paths)
{                     //将不在路径中的节点加入路径，形成路径集合
    PATH tempath;
    adjacents=DeleteNodeInPath(adjacents, path);            //删除构成回路的节点
    while (adjacents)                                       //所有不构成回路的节点
    {
        tempath=CopyPath(path);                             //复制路径
        tempath=AddANodeToPath(adjacents->node, tempath);    //在路径中加入一个节点
        paths=AddAPathToPaths(tempath, paths);              //新路径加入路径集合
        adjacents=adjacents->next;                          //下一个节点
    }
    return paths;                                           //返回路径集合
}

 STACK PushAPath(STACK stack, PATH path)				//一条路径进栈
{
	PATH tempath;
	STACK st;
	tempath=CopyPath(path);							//复制路径
	st=(struct Paths*)malloc(sizeof(struct Paths));	//路径节点
	st->path=tempath;								//置路径于栈中
	if(stack==NULL)									//第一条路径
		st->next=NULL;
	else
		st->next=stack;
	stack=st;
	return stack;
}
STACK PushPaths(STACK stack, struct Paths *paths)
{											//所有路径进栈
	struct Paths *p, *head;
	head=CopyPaths(paths);					//复制路径集合
	p=head;
	if(p!=NULL)
	{
		while(p->next) p=p->next;
		p->next=stack;
		stack=head;
	}
	return stack;
}
NEIGHBOR ExpandNodes(NODE node, int zero)       //生成新的节点集合
{
    NEIGHBOR adjacents=NULL;                    //所有派生的节点集合
    int h,v;                                    //空格位置
    NODE tempnode;                              //临时节点
    if(!Locate(node, &h, &v, zero))  return adjacents;
                                        //没有找到空格位置，若找到空格则位置为h，v
    if(h==0&&v==0)
    {
        setvalue(tempnode, node);             //对九宫格的节点赋值
        Exchange(tempnode, h, v, h+1, v);   //交换位置
        adjacents=AddAnAdjacents(adjacents, tempnode);  //收集新的节点
        setvalue(tempnode, node);
        Exchange(tempnode, h, v ,h, v+1);
        adjacents=AddAnAdjacents(adjacents, tempnode);
    }
    else if(h==0&&v==1)                             //空格位置
    {   
        setvalue(tempnode, node);                     //对九宫格节点赋值
        Exchange(tempnode, h, v, h, v-1);           //交换位置
        adjacents=AddAnAdjacents(adjacents, tempnode);  //收集新的节点
        setvalue(tempnode, node);
        Exchange(tempnode, h, v, h ,v+1);
        adjacents=AddAnAdjacents(adjacents, tempnode);
        setvalue(tempnode, node);
        Exchange(tempnode, h, v, h+1, v);
        adjacents=AddAnAdjacents(adjacents, tempnode);
    }
    else if(h==0&&v==2)
    {
        setvalue(tempnode, node);                     //对九宫格节点赋值
        Exchange(tempnode, h, v, h, v-1);           //交换位置
        adjacents=AddAnAdjacents(adjacents, tempnode);  //收集新的节点
        setvalue(tempnode, node);
        Exchange(tempnode, h, v, h+1, v);
        adjacents=AddAnAdjacents(adjacents, tempnode);
    }
    else if(h==1&&v==0)
    {
        setvalue(tempnode, node);                     //对九宫格节点赋值
        Exchange(tempnode, h, v, h-1, v);           //交换位置
        adjacents=AddAnAdjacents(adjacents, tempnode);  //收集新的节点
        setvalue(tempnode, node);
        Exchange(tempnode, h, v, h+1 ,v);
        adjacents=AddAnAdjacents(adjacents, tempnode);
        setvalue(tempnode, node);
        Exchange(tempnode, h, v, h, v+1);
        adjacents=AddAnAdjacents(adjacents, tempnode);
    }
    else if(h==1&&v==1)
    {
        setvalue(tempnode, node);                     //对九宫格节点赋值
        Exchange(tempnode, h, v, h-1, v);           //交换位置
        adjacents=AddAnAdjacents(adjacents, tempnode);  //收集新的节点
        setvalue(tempnode, node);
        Exchange(tempnode, h, v, h+1, v);
        adjacents=AddAnAdjacents(adjacents, tempnode);
        setvalue(tempnode, node);
        Exchange(tempnode, h, v, h, v-1);
        adjacents=AddAnAdjacents(adjacents, tempnode); 
        setvalue(tempnode, node);
        Exchange(tempnode, h, v, h, v+1);
        adjacents=AddAnAdjacents(adjacents, tempnode);
    }
    else if(h==1&&v==2)
    {
        setvalue(tempnode, node);                     //对九宫格节点赋值
        Exchange(tempnode, h, v, h-1, v);           //交换位置
        adjacents=AddAnAdjacents(adjacents, tempnode);  //收集新的节点
        setvalue(tempnode, node);
        Exchange(tempnode, h, v, h+1 ,v);
        adjacents=AddAnAdjacents(adjacents, tempnode);
        setvalue(tempnode, node);
        Exchange(tempnode, h, v, h, v-1);
        adjacents=AddAnAdjacents(adjacents, tempnode);
    }
    else if(h==2&&v==0)
    {
        setvalue(tempnode, node);                     //对九宫格节点赋值
        Exchange(tempnode, h, v, h-1, v);           //交换位置
        adjacents=AddAnAdjacents(adjacents, tempnode);  //收集新的节点
        setvalue(tempnode, node);
        Exchange(tempnode, h, v, h, v+1);
        adjacents=AddAnAdjacents(adjacents, tempnode);
    }
    else if(h==2&&v==1)
    {
        setvalue(tempnode, node);                     //对九宫格节点赋值
        Exchange(tempnode, h, v, h-1, v);           //交换位置
        adjacents=AddAnAdjacents(adjacents, tempnode);  //收集新的节点
        setvalue(tempnode, node);
        Exchange(tempnode, h, v, h ,v-1);
        adjacents=AddAnAdjacents(adjacents, tempnode);
        setvalue(tempnode, node);
        Exchange(tempnode, h, v, h, v+1);
        adjacents=AddAnAdjacents(adjacents, tempnode);
    }
    else if(h==2&&v==2)
    {
        setvalue(tempnode, node);                     //对九宫格节点赋值
        Exchange(tempnode, h, v, h-1, v);           //交换位置
        adjacents=AddAnAdjacents(adjacents, tempnode);  //收集新的节点
        setvalue(tempnode, node);
        Exchange(tempnode, h, v, h, v-1);
        adjacents=AddAnAdjacents(adjacents, tempnode);
    }
    return adjacents;       //派生所有新的节点
}
NEIGHBOR ClearNeighbors(NEIGHBOR br)	//回收兄弟节点空间
{
	NEIGHBOR br1=br;
	while(br)
	{
		br1=br;
		br=br->next;
		free(br1);	//回收单元 
	}
	return br;		//返回NULL 
 } 
STACK PopANode(STACK stack, NODE node, PATH  *path)
{									//出栈，并获取节点和路径
	STACK p=stack;
	PATH tempath;
	if (p!=NULL)
	{
		tempath=p->path;							//一条路径
		setvalue(node, tempath->node);				//获取节点
		*path=CopyPath(tempath);					//获取路径
		stack=p->next;								//栈顶变化
		free(p);									//删除路径
	}
	return stack;
}
PATH ClearPath(PATH path)				//回收路径空间
{
	path=(PATH)ClearNeighbors((NEIGHBOR)path);			//路径与兄弟节点集合形式相同
	return path;
}
struct Paths* ClearPaths(struct Paths* paths)			//回收路径空间
{
	struct Paths *paths1=paths;
	while(paths)									//所有路径
	{
		paths1=paths;
		ClearPath(paths1->path);					//回收一条路径空间
		paths=paths->next;							//下一条路径
		free(paths1);
	}
	return paths;
}
STACK ClearStack(STACK stack)				//回收栈空间
{
	stack=ClearPaths((struct Paths *)stack);			//堆栈于路径集合的形式相同
	return stack;
}
void RevPath(PATH path)				//路径倒叙
{
	int num=0, i;
	NODE *nodes;
	PATH p=path;
	while (p)						//统计路径节点个数
	{
		p=p->next; num++;
	}
	nodes=(NODE *)malloc(num*sizeof(NODE));	//开辟一维数组
	for ( i = 0, p = path; p ;p=p->next, i++)
		setvalue(nodes[i], p->node);
	for(i = num-1, p = path; p ;p=p->next, i--)
		setvalue(p->node, nodes[i]);
	free(nodes);
} 
void priNeighbors(NEIGHBOR adjacents)
{
	NEIGHBOR br;
	br=adjacents;
	while(br)
	{
		priNode(br->node);
		br=br->next;
	}
	printf("\n");
	printf("*************************************\n");
}
void priPath(PATH path)
{
	priNeighbors((NEIGHBOR)path);
}
STATUS SearchPath( NODE start, NODE end,
 PATH *path, int zero)
{//判断节点是否在图中，并获取路径
    NODE node;
    NEIGHBOR adjacents;
    STACK stack=NULL;
    STATUS flag=FALSE;
    PATH tempath=NULL;
    struct Paths *paths=NULL;
    tempath=AddANodeToPath(start, tempath);          //初始节点形成路径
    stack=PushAPath(stack, tempath);            //路径进栈
    while (stack)
    {
        tempath=ClearPath(tempath);             //清空路径
        stack=PopANode(stack, node, &tempath);  //出栈
        if (equal(end, node)==1)
        {
            flag=TRUE;                          //找到目标节点
            *path=CopyPath(tempath);            //获取路径
            break;
        }
        adjacents=ExpandNodes(node, ZERO);     //相邻的所有节点
        paths=FormPathsFromNodes(adjacents, tempath, paths);          //形成不带回路的路劲集合
        stack=PushPaths(stack, paths);				//所有路径进栈
		paths=ClearPaths(paths);					//回收所有路径
    }
    ClearStack(stack);								//清楚堆栈
	return flag;
}
long int LengthOfPath(PATH path)                    //路径长度
{   
    long int i=1;
    PATH p=path;
    while(p)
    {
        i++;
        p=p->next;
    }
    return i;
}
int main()
{
    STACK stack=NULL;               //路径堆栈(线性表)
    PATH path=NULL;                 //路径
    STATUS flag;                    //是否找到路径的标识
    NODE start={{1, 2, 3},{8, 4, 0},{7, 6, 5}}; //初始状态
    NODE end= {{1, 2, 3},{8, 0, 4},{7, 6, 5}};  //目标状态
    printf("Search from: \n");
    priNode(start);             //显示九宫格的初始节点
    printf("to:\n");
    priNode(end);               //显示九宫格的目标节点
    flag=SearchPath(start, end, &path, ZERO);   //搜索路径
    printf("Path:\n");
    RevPath(path);                              //路径倒叙
    priPath(path);                              //显示路径
    printf("\nStep=%ld, Status=%d\n", LengthOfPath(path)-1, flag);
    printf("*****************************************\n");
    ClearPath(path);                        //清空路径，回收路径空间
    return 0;
}
